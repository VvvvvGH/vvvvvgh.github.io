import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,b as e,o as i}from"./app-CJlMl9Ja.js";const p={};function t(l,s){return i(),n("div",null,s[0]||(s[0]=[e(`<h1 id="在spring使用mongodb" tabindex="-1"><a class="header-anchor" href="#在spring使用mongodb"><span>在Spring使用MongoDB</span></a></h1><p>文档地址：https://docs.spring.io/spring-data/mongodb/docs/current/reference/html/#mongo.core</p><h2 id="spring-的mongodb支持" tabindex="-1"><a class="header-anchor" href="#spring-的mongodb支持"><span>Spring 的MongoDB支持</span></a></h2><p>MongoTemplate 帮助类和 MongoRepository 支持文档与POJO的对象映射</p><h3 id="基本配置" tabindex="-1"><a class="header-anchor" href="#基本配置"><span>基本配置</span></a></h3><p>Maven</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>  &lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;spring-data-mongodb&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;version&gt;3.0.3.RELEASE&lt;/version&gt;</span></span>
<span class="line"><span>  &lt;/dependency&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>日志</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>log4j.category.org.springframework.data.mongodb=DEBUG</span></span>
<span class="line"><span>log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} %5p %40.40c:%4L - %m%n</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="主从配置" tabindex="-1"><a class="header-anchor" href="#主从配置"><span>主从配置</span></a></h2><p>参考链接：https://docs.spring.io/spring-boot/docs/2.3.3.RELEASE/reference/htmlsingle/#boot-features-connecting-to-mongodb</p><p>使用 spring.data.mongodb.uri 进行replicaset的配置</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>spring.data.mongodb.uri=mongodb://user:secret@mongo1.example.com:12345,mongo2.example.com:23456/test</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>不使用主从时使用以下配置：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>spring.data.mongodb.host=mongoserver.example.com</span></span>
<span class="line"><span>spring.data.mongodb.port=27017</span></span>
<span class="line"><span>spring.data.mongodb.database=test</span></span>
<span class="line"><span>spring.data.mongodb.username=user</span></span>
<span class="line"><span>spring.data.mongodb.password=secret</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>文档地址： https://docs.mongodb.com/manual/reference/connection-string/</p><p><strong>标准URI String 格式</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>mongodb://[username:password@]host1[:port1][,...hostN[:portN]][/[defaultauthdb][?options]]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>选项配置</strong> https://docs.mongodb.com/manual/reference/connection-string/#connections-connection-options</p><p><strong>例子</strong> 复制集配置：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>mongodb://db1.example.net:27017,db2.example.net:2500/?replicaSet=test&amp;connectTimeoutMS=300000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>分片集群：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>mongodb://mongos0.example.com:27017,mongos1.example.com:27017,mongos2.example.com:27017</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="mongo-shell" tabindex="-1"><a class="header-anchor" href="#mongo-shell"><span>Mongo shell</span></a></h2><p>显示当前数据库</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>db</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>选择数据库</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>use (database name)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="备份与恢复" tabindex="-1"><a class="header-anchor" href="#备份与恢复"><span>备份与恢复</span></a></h2><p><strong>mongo dump</strong><code>mongodump --username username --password userpassword --db database</code><strong>Mongo restore</strong><code>mongorestore --dir database-dump/ -u username -p userpassword</code></p><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h2><p>MongoDB在保留了JSON k-v对特性的同时增加了其它数据类型的支持。</p><h3 id="总览" tabindex="-1"><a class="header-anchor" href="#总览"><span>总览</span></a></h3><h3 id="id-和-objectids" tabindex="-1"><a class="header-anchor" href="#id-和-objectids"><span>_id 和 ObjectIds</span></a></h3><p>MongoDB内每个文档都必需含有 &quot;_id&quot;这个键，&quot;_id&quot;可以是任意类型，默认是ObjectId。单个集合内的文档必须有唯一的id，不同集合间可以相同。</p><h4 id="objectid" tabindex="-1"><a class="header-anchor" href="#objectid"><span>ObjectId</span></a></h4><ul><li>是 &quot;_id&quot;的默认值</li><li>轻量级，容易生成全局唯一值</li><li>因为MongoDB为分布式而设计，所以不仅仅使用自增</li><li>占用12bytes，<strong>换成16进制就是长度为24的16进制字符串</strong></li></ul><p>ObjectId 格式：</p><ul><li>4 bytes：timestamp</li><li>3 bytes: 机器的唯一标签，一般是hostname的hash</li><li>2 bytes：进程的PID</li><li>3 bytes：自增计数器，单个进程最多256^3个唯一ObjectId</li></ul><h2 id="mongotemplate" tabindex="-1"><a class="header-anchor" href="#mongotemplate"><span>MongoTemplate</span></a></h2><ul><li>线程安全，可以多个实例复用</li><li>对象与文档的映射通过MongoConverter完成，Spring提供 MappingMongoConverter，也可以自己写。</li></ul><h3 id="查询" tabindex="-1"><a class="header-anchor" href="#查询"><span>查询</span></a></h3><p>基本使用示例:查询与分页</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>import static org.springframework.data.mongodb.core.query.Criteria.where;</span></span>
<span class="line"><span>import static org.springframework.data.mongodb.core.query.Update.update;</span></span>
<span class="line"><span>import static org.springframework.data.mongodb.core.query.Query.query;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public Page&lt;MySuperUserDto&gt; getVipUserList(int size, int page) {</span></span>
<span class="line"><span>        // 查询，排序</span></span>
<span class="line"><span>        Sort sort = new Sort(Sort.Direction.DESC, &quot;bsUserId&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // 分页，添加排序</span></span>
<span class="line"><span>        Pageable pageable = PageRequest.of(page, size, sort);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        List&lt;UserPo&gt; userList = mongoTemplate.find(</span></span>
<span class="line"><span>                query(where(&quot;BBBBBB&quot;)</span></span>
<span class="line"><span>                        .is(&quot;TTTTTT&quot;))</span></span>
<span class="line"><span>                        .with(pageable)</span></span>
<span class="line"><span>                , UserPo.class);</span></span>
<span class="line"><span>        userList.forEach(user -&gt; log.info(&quot;user: &quot; + user));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // 正则表达式</span></span>
<span class="line"><span>        userList = mongoTemplate.find(</span></span>
<span class="line"><span>                query(where(&quot;clientType&quot;)</span></span>
<span class="line"><span>                        .regex(&quot;TTTTTT.*?&quot;))</span></span>
<span class="line"><span>                        .with(pageable)</span></span>
<span class="line"><span>                , UserPo.class);</span></span>
<span class="line"><span>        userList.forEach(user -&gt; log.info(&quot;user: &quot; + user));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // 总数</span></span>
<span class="line"><span>        long count = mongoTemplate.count(query(where(&quot;clientType&quot;)</span></span>
<span class="line"><span>                        .regex(&quot;TTTTTT.*?&quot;))</span></span>
<span class="line"><span>                        .with(pageable)</span></span>
<span class="line"><span>                , UserPo.class);</span></span>
<span class="line"><span>        log.info(&quot;Record count: &quot; + count);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        List&lt;MySuperUserDto&gt; userDtoList = VipUserMapper.INSTANCE.superUserToDto(userList);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // 分页实现</span></span>
<span class="line"><span>        Page&lt;MySuperUserDto&gt; dtoPage = new PageImpl&lt;&gt;(userDtoList, pageable, count);</span></span>
<span class="line"><span>        // 获取总页数</span></span>
<span class="line"><span>        dtoPage.getTotalPages();</span></span>
<span class="line"><span>        // 获取总记录数</span></span>
<span class="line"><span>        dtoPage.getTotalElements();</span></span>
<span class="line"><span>        log.info(&quot;Page info: &quot; + dtoPage);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        // 使用 limit 和 skip的分页方式</span></span>
<span class="line"><span>        userList = mongoTemplate.find(</span></span>
<span class="line"><span>                query(where(&quot;clientType&quot;)</span></span>
<span class="line"><span>                        .regex(&quot;TTTTTT.*?&quot;))</span></span>
<span class="line"><span>                        .skip(size * page)</span></span>
<span class="line"><span>                        .limit(size)</span></span>
<span class="line"><span>                , UserPo.class);</span></span>
<span class="line"><span>        userList.forEach(user -&gt; log.info(&quot;user: &quot; + user));</span></span>
<span class="line"><span>        userDtoList = VipUserMapper.INSTANCE.superUserToDto(userList);</span></span>
<span class="line"><span>    }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="插入" tabindex="-1"><a class="header-anchor" href="#插入"><span>插入</span></a></h3><blockquote><p><strong>insert</strong>: Inserts an object. If there is an existing document with the same id, an error is generated.</p></blockquote><blockquote><p><strong>insertAll</strong>: Takes a Collection of objects as the first parameter. This method inspects each object and inserts it into the appropriate collection, based on the rules specified earlier.</p></blockquote><blockquote><p><strong>save</strong>: Saves the object, overwriting any object that might have the same id.</p></blockquote><h3 id="更新-update" tabindex="-1"><a class="header-anchor" href="#更新-update"><span>更新 <code>update</code></span></a></h3><ul><li>updateFirst</li></ul><p>支持使用upsert()，即当没有找到文档的时候，执行插入操作</p><ul><li>updateMulti</li></ul><p>Update支持MongoDB的update modifier，详情看文档</p><ul><li>findAndModify</li></ul><p>支持更新文档后返回旧的或是新的文档，使用示例：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>Query query = new Query(Criteria.where(&quot;firstName&quot;).is(&quot;Harry&quot;));</span></span>
<span class="line"><span>Update update = new Update().inc(&quot;age&quot;, 1);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Person oldValue = template.update(Person.class)</span></span>
<span class="line"><span>  .matching(query)</span></span>
<span class="line"><span>  .apply(update)</span></span>
<span class="line"><span>  .findAndModifyValue(); // return&#39;s old person object</span></span>
<span class="line"><span></span></span>
<span class="line"><span>assertThat(oldValue.getFirstName()).isEqualTo(&quot;Harry&quot;);</span></span>
<span class="line"><span>assertThat(oldValue.getAge()).isEqualTo(23);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Person newValue = template.query(Person.class)</span></span>
<span class="line"><span>  .matching(query)</span></span>
<span class="line"><span>  .findOneValue();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>assertThat(newValue.getAge()).isEqualTo(24);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Person newestValue = template.update(Person.class)</span></span>
<span class="line"><span>  .matching(query)</span></span>
<span class="line"><span>  .apply(update)</span></span>
<span class="line"><span>  .withOptions(FindAndModifyOptions.options().returnNew(true)) // Now return the newly updated document when updating</span></span>
<span class="line"><span>  .findAndModifyValue();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>assertThat(newestValue.getAge()).isEqualTo(25);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>更多选项</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>Person upserted = template.update(Person.class)</span></span>
<span class="line"><span>  .matching(new Query(Criteria.where(&quot;firstName&quot;).is(&quot;Mary&quot;)))</span></span>
<span class="line"><span>  .apply(update)</span></span>
<span class="line"><span>  .withOptions(FindAndModifyOptions.options().upsert(true).returnNew(true))</span></span>
<span class="line"><span>  .findAndModifyValue()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="aggregation更新" tabindex="-1"><a class="header-anchor" href="#aggregation更新"><span>Aggregation更新</span></a></h3><p>使用案例，按范围设定值</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>AggregationUpdate update = Aggregation.newUpdate()</span></span>
<span class="line"><span>    .set(&quot;average&quot;).toValue(ArithmeticOperators.valueOf(&quot;tests&quot;).avg())     </span></span>
<span class="line"><span>    .set(&quot;grade&quot;).toValue(ConditionalOperators.switchCases(                 </span></span>
<span class="line"><span>        when(valueOf(&quot;average&quot;).greaterThanEqualToValue(90)).then(&quot;A&quot;),</span></span>
<span class="line"><span>        when(valueOf(&quot;average&quot;).greaterThanEqualToValue(80)).then(&quot;B&quot;),</span></span>
<span class="line"><span>        when(valueOf(&quot;average&quot;).greaterThanEqualToValue(70)).then(&quot;C&quot;),</span></span>
<span class="line"><span>        when(valueOf(&quot;average&quot;).greaterThanEqualToValue(60)).then(&quot;D&quot;))</span></span>
<span class="line"><span>        .defaultTo(&quot;F&quot;)</span></span>
<span class="line"><span>    );</span></span>
<span class="line"><span></span></span>
<span class="line"><span>template.update(Student.class)                                              </span></span>
<span class="line"><span>    .apply(update)</span></span>
<span class="line"><span>    .all();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="findandreplace" tabindex="-1"><a class="header-anchor" href="#findandreplace"><span>findAndReplace</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>Optional&lt;User&gt; result = template.update(Person.class)      </span></span>
<span class="line"><span>    .matching(query(where(&quot;firstame&quot;).is(&quot;Tom&quot;)))  </span></span>
<span class="line"><span>    .replaceWith(new Person(&quot;Dick&quot;))</span></span>
<span class="line"><span>    // 提示：用于replace的对象不要有id，因为替换操作后，旧文档的id会给到新文档上</span></span>
<span class="line"><span>    .withOptions(FindAndReplaceOptions.options().upsert()) </span></span>
<span class="line"><span>    // 如果没有就进行插入</span></span>
<span class="line"><span>    .as(User.class)</span></span>
<span class="line"><span>    // 支持映射到其它对像</span></span>
<span class="line"><span>    .findAndReplace();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="乐观锁" tabindex="-1"><a class="header-anchor" href="#乐观锁"><span>乐观锁</span></a></h3><p>要启用乐观锁，需要在类里面添加 <code>@Version Long version;</code>。 示例</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>@Document</span></span>
<span class="line"><span>class Person {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  @Id String id;</span></span>
<span class="line"><span>  String firstname;</span></span>
<span class="line"><span>  String lastname;</span></span>
<span class="line"><span>  @Version Long version;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Person daenerys = template.insert(new Person(&quot;Daenerys&quot;));</span></span>
<span class="line"><span>// 此时version = 0</span></span>
<span class="line"><span>Person tmp = template.findOne(query(where(&quot;id&quot;).is(daenerys.getId())), Person.class);</span></span>
<span class="line"><span>// 此时version = 0</span></span>
<span class="line"><span>daenerys.setLastname(&quot;Targaryen&quot;); // 此时version = 1</span></span>
<span class="line"><span>template.save(daenerys);</span></span>
<span class="line"><span>template.save(tmp); // throws OptimisticLockingFailureException</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="删除-delete" tabindex="-1"><a class="header-anchor" href="#删除-delete"><span>删除 <code>delete</code></span></a></h3><h3 id="类型映射" tabindex="-1"><a class="header-anchor" href="#类型映射"><span>类型映射</span></a></h3><h4 id="id的映射" tabindex="-1"><a class="header-anchor" href="#id的映射"><span>_id的映射</span></a></h4><ul><li>如果没有提供，将会自动生成</li><li>添加了@Id注解将映射为_id</li><li>命名为id的对象将映射为_id</li></ul><p><strong>类型转换规则</strong></p><ol><li>字符串：如果使用 Converter&lt;String, ObjectId&gt; 可以成功转为 ObjectId， 则存储为ObjectId，否则以字符串格式存储。</li><li>BigInteger用Converter&lt;BigInteger, ObjectId&gt;转换成ObjectId</li></ol><p><strong>@MongoId注解</strong> 如果数据没有通过Spring Data映射层，该注解提供更多可定制选项</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>public class PlainStringId {</span></span>
<span class="line"><span>  @MongoId String id; // The id is treated as String without further conversion.</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>public class PlainObjectId {</span></span>
<span class="line"><span>  @MongoId ObjectId id;  // The id is treated as ObjectId</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>public class StringToObjectId {</span></span>
<span class="line"><span>  @MongoId(FieldType.OBJECT_ID) String id; // The id is treated as ObjectId if the given String is a valid ObjectId hex, otherwise as String. Corresponds to @Id usage.</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>继续： https://docs.spring.io/spring-data/mongodb/docs/current/reference/html/#mongo-template 11.5.2</p><h4 id="类型映射-1" tabindex="-1"><a class="header-anchor" href="#类型映射-1"><span>类型映射</span></a></h4><p>@TypeAlias 用于不把Java类名写成类型信息而使用key</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>@TypeAlias(&quot;pers&quot;)</span></span>
<span class="line"><span>class Person {}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,78)]))}const d=a(p,[["render",t]]),c=JSON.parse('{"path":"/posts/2020-11-02-mongo-basic.html","title":"Mongo基础","lang":"zh-CN","frontmatter":{"title":"Mongo基础","date":"2020-11-02T00:00:00.000Z","category":["MongoDB","Spring","数据库"],"tag":["MongoTemplate","Spring Data MongoDB","配置","主从复制","备份恢复","数据类型","ObjectId","查询","插入","更新","乐观锁"],"file_name":"2020-11-02-mongo-basic.md","description":"在Spring使用MongoDB 文档地址：https://docs.spring.io/spring-data/mongodb/docs/current/reference/html/#mongo.core Spring 的MongoDB支持 MongoTemplate 帮助类和 MongoRepository 支持文档与POJO的对象映射 基本配置...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Mongo基础\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-11-02T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-29T15:26:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Guohao\\",\\"url\\":\\"https://space.vistazx1.top\\"}]}"],["meta",{"property":"og:url","content":"https://space.vistazx1.top/posts/2020-11-02-mongo-basic.html"}],["meta",{"property":"og:site_name","content":"Vista"}],["meta",{"property":"og:title","content":"Mongo基础"}],["meta",{"property":"og:description","content":"在Spring使用MongoDB 文档地址：https://docs.spring.io/spring-data/mongodb/docs/current/reference/html/#mongo.core Spring 的MongoDB支持 MongoTemplate 帮助类和 MongoRepository 支持文档与POJO的对象映射 基本配置..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-29T15:26:05.000Z"}],["meta",{"property":"article:tag","content":"乐观锁"}],["meta",{"property":"article:tag","content":"更新"}],["meta",{"property":"article:tag","content":"插入"}],["meta",{"property":"article:tag","content":"查询"}],["meta",{"property":"article:tag","content":"ObjectId"}],["meta",{"property":"article:tag","content":"数据类型"}],["meta",{"property":"article:tag","content":"备份恢复"}],["meta",{"property":"article:tag","content":"主从复制"}],["meta",{"property":"article:tag","content":"配置"}],["meta",{"property":"article:tag","content":"Spring Data MongoDB"}],["meta",{"property":"article:tag","content":"MongoTemplate"}],["meta",{"property":"article:published_time","content":"2020-11-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-29T15:26:05.000Z"}]]},"git":{"createdTime":1727623300000,"updatedTime":1727623565000,"contributors":[{"name":"root","username":"root","email":"root@vistazx1.top","commits":2,"url":"https://github.com/root"}]},"readingTime":{"minutes":4.42,"words":1325},"filePathRelative":"posts/2020-11-02-mongo-basic.md","excerpt":"\\n<p>文档地址：https://docs.spring.io/spring-data/mongodb/docs/current/reference/html/#mongo.core</p>\\n<h2>Spring 的MongoDB支持</h2>\\n<p>MongoTemplate 帮助类和 MongoRepository 支持文档与POJO的对象映射</p>\\n<h3>基本配置</h3>\\n<p>Maven</p>\\n<div class=\\"language- line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-\\"><span class=\\"line\\"><span>  &lt;dependency&gt;</span></span>\\n<span class=\\"line\\"><span>    &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;</span></span>\\n<span class=\\"line\\"><span>    &lt;artifactId&gt;spring-data-mongodb&lt;/artifactId&gt;</span></span>\\n<span class=\\"line\\"><span>    &lt;version&gt;3.0.3.RELEASE&lt;/version&gt;</span></span>\\n<span class=\\"line\\"><span>  &lt;/dependency&gt;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{d as comp,c as data};
