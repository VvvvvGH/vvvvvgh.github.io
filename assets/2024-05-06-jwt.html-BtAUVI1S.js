import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as i,o as n}from"./app-CJlMl9Ja.js";const s={};function o(r,e){return n(),a("div",null,e[0]||(e[0]=[i(`<h2 id="什么是-json-web-token" tabindex="-1"><a class="header-anchor" href="#什么是-json-web-token"><span>什么是 JSON Web Token？</span></a></h2><p>JSON Web Token（JWT）是一种通用的基于文本的消息传输格式，用于以紧凑和安全的方式传输信息。与普遍认知相反，JWT不仅仅适用于在网络上发送和接收身份令牌——尽管这是最常见的用例。JWT还可以用于传输任何类型的数据。</p><p>一个最基本的 JWT 包含两部分：</p><ul><li>称为负载（payload）的主要数据</li><li>一个代表关于负载和消息本身的元数据的名称/值对的 JSON 对象，称为头部（header）</li></ul><p>JWT 的负载可以是任何东西——任何可以表示为字节数组的东西，如字符串、图片、文档等。</p><p>由于 JWT 头部是一个 JSON 对象，因此理论上 JWT 负载也可以是一个 JSON 对象。在许多情况下，开发人员希望负载是表示用户、计算机或类似身份概念的数据的 JSON。当以这种方式使用时，负载被称为 JSON Claims 对象，该对象中的每一个名称/值对都被称为一个声明——每一条信息都在声明有关某个身份的信息。</p><p>虽然关于身份提出&quot;声明&quot;很有用，但实际上任何人都可以这么做。重要的是，你需要通过验证这些声明是否来自你信任的人或计算机来信任这些声明。</p><p>JWT 的一个特性是它可以通过各种方式进行安全保护。JWT 可以进行加密签名（JWS）或加密（JWE）。这为 JWT 增加了一个强大的可验证性层——JWS 或 JWE 的接收者可以通过验证签名或解密来高度信任它来自于他们信任的人。正是这种可验证性特性使得 JWT 成为发送和接收敏感信息（如身份声明）的良好选择。</p><p>最后，虽然具有人类可读性的带空格的 JSON 很好，但它并不是一种非常高效的消息格式。因此，JWT 可以被压缩（甚至压缩）成最小的表示形式——基本上是 Base64URL 编码的字符串——这样它们就可以在网络上更有效地传输，如在 HTTP 头或 URL 中。</p><h3 id="jwt-示例" tabindex="-1"><a class="header-anchor" href="#jwt-示例"><span>JWT 示例</span></a></h3><p>一旦你拥有了负载和头部，它们是如何为网络传输而压缩的，最终的 JWT 实际上是什么样的？让我们通过一些伪代码简化这个过程：</p><p>假设我们有一个带有 JSON 头部和简单文本消息负载的 JWT： alg 是 JWT 的算法，none 代表无算法</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>String header = &#39;{&quot;alg&quot;:&quot;none&quot;}&#39;; </span></span>
<span class="line"><span>String payload = &#39;智慧的真正标志不是知识而是想象力。&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>获取 UTF-8 字节并对每一个进行 Base64URL 编码：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>String encodedHeader = base64URLEncode(header.getBytes(&quot;UTF-8&quot;)); </span></span>
<span class="line"><span>String encodedPayload = base64URLEncode(payload.getBytes(&quot;UTF-8&quot;));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>用点（&#39;.&#39;）字符连接编码后的头部和声明：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>String compact = encodedHeader + &#39;.&#39; + encodedPayload + &#39;.&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>最终连接后的紧凑 JWT 字符串如下所示： <code>eyJhbGciOiJub25lIn0.VGhlIHRydWUgc2lnbiBvZiBpbnRlbGxpZ2VuY2UgaXMgbm90IGtub3dsZWRnZSBidXQgaW1hZ2luYXRpb24u.</code></p><p>这个就是最简单的 JWT，没有数字签名也没有加密吗。也是相当不安全的。</p><p>如果使用 JWS ，添加 Hmac-sha256 签名算法，则数据就变成</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>String header = &#39;{&quot;alg&quot;:&quot;HS256&quot;}&#39;; </span></span>
<span class="line"><span>String payload = &#39;智慧的真正标志不是知识而是想象力。&#39;</span></span>
<span class="line"><span>byte[] signature = hmacSha256(concatenated, key);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>则最终拼接的 JWT 数据为</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>String concatenated = encodedHeader + &#39;.&#39; + encodedClaims + &#39;.&#39; + base64URLEncode(signature);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,23)]))}const c=t(s,[["render",o]]),d=JSON.parse('{"path":"/posts/2024-05-06-jwt.html","title":"JWT (JSON Web Token) 详解","lang":"zh-CN","frontmatter":{"title":"JWT (JSON Web Token) 详解","date":"2024-05-06T00:00:00.000Z","category":["安全技术","Web开发","身份验证"],"tag":["JWT","JSON Web Token","身份验证","安全传输","JWS","JWE","Base64URL","签名算法","负载","头部","HMAC","加密解密","Claims","Web安全"],"excerpt":"JSON Web Token（JWT）是一种通用的基于文本的消息传输格式，用于以紧凑和安全的方式传输信息。本文详细介绍JWT的结构、工作原理和安全特性。","description":"什么是 JSON Web Token？ JSON Web Token（JWT）是一种通用的基于文本的消息传输格式，用于以紧凑和安全的方式传输信息。与普遍认知相反，JWT不仅仅适用于在网络上发送和接收身份令牌——尽管这是最常见的用例。JWT还可以用于传输任何类型的数据。 一个最基本的 JWT 包含两部分： 称为负载（payload）的主要数据 一个代表关...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JWT (JSON Web Token) 详解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-06T00:00:00.000Z\\",\\"dateModified\\":\\"2025-05-29T14:36:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Guohao\\",\\"url\\":\\"https://space.vistazx1.top\\"}]}"],["meta",{"property":"og:url","content":"https://space.vistazx1.top/posts/2024-05-06-jwt.html"}],["meta",{"property":"og:site_name","content":"Vista"}],["meta",{"property":"og:title","content":"JWT (JSON Web Token) 详解"}],["meta",{"property":"og:description","content":"什么是 JSON Web Token？ JSON Web Token（JWT）是一种通用的基于文本的消息传输格式，用于以紧凑和安全的方式传输信息。与普遍认知相反，JWT不仅仅适用于在网络上发送和接收身份令牌——尽管这是最常见的用例。JWT还可以用于传输任何类型的数据。 一个最基本的 JWT 包含两部分： 称为负载（payload）的主要数据 一个代表关..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-29T14:36:19.000Z"}],["meta",{"property":"article:tag","content":"Web安全"}],["meta",{"property":"article:tag","content":"Claims"}],["meta",{"property":"article:tag","content":"加密解密"}],["meta",{"property":"article:tag","content":"HMAC"}],["meta",{"property":"article:tag","content":"头部"}],["meta",{"property":"article:tag","content":"负载"}],["meta",{"property":"article:tag","content":"签名算法"}],["meta",{"property":"article:tag","content":"Base64URL"}],["meta",{"property":"article:tag","content":"JWE"}],["meta",{"property":"article:tag","content":"JWS"}],["meta",{"property":"article:tag","content":"安全传输"}],["meta",{"property":"article:tag","content":"身份验证"}],["meta",{"property":"article:tag","content":"JSON Web Token"}],["meta",{"property":"article:tag","content":"JWT"}],["meta",{"property":"article:published_time","content":"2024-05-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-29T14:36:19.000Z"}]]},"git":{"createdTime":1727623300000,"updatedTime":1748529379000,"contributors":[{"name":"root","username":"root","email":"root@vistazx1.top","commits":1,"url":"https://github.com/root"},{"name":"VvvvvGH","username":"VvvvvGH","email":"cheng123xp@gmail.com","commits":1,"url":"https://github.com/VvvvvGH"}]},"readingTime":{"minutes":3.19,"words":956},"filePathRelative":"posts/2024-05-06-jwt.md","autoDesc":true}');export{c as comp,d as data};
