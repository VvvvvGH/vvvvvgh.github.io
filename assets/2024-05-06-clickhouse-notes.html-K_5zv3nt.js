import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,b as a,o as t}from"./app-CJlMl9Ja.js";const n={};function l(h,s){return t(),e("div",null,s[0]||(s[0]=[a('<h1 id="clickhouse笔记" tabindex="-1"><a class="header-anchor" href="#clickhouse笔记"><span>Clickhouse笔记</span></a></h1><ol><li>创建包含 JSON 表的时候，需要使用实验功能</li></ol><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> allow_experimental_object_type</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> table</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> rc_field_json</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(fieldData </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">JSON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> String, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">timestamp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> DATETIME64) ENGINE </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> MergeTree </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ORDER BY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">event</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">timestamp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li><p>TCP 客户端不支持 JSON</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>Not implemented for SerializationObject: While executing BinaryRowInputFormat</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>主键索引指南</p><p>https://clickhouse.com/docs/en/optimize/sparse-primary-indexes</p></li><li><p>支持字段、行、表级别的 TTL 设置</p><p>https://clickhouse.com/docs/en/guides/developer/ttl</p><p>TTL事件的触发条件：</p><ul><li>table merge</li><li><code>merge_with_ttl_timeout</code>: the minimum delay in seconds before repeating a merge with delete TTL. The default is 14400 seconds (4 hours).</li><li><code>merge_with_recompression_ttl_timeout</code>: the minimum delay in seconds before repeating a merge with recompression TTL (rules that roll up data before deleting). Default value: 14400 seconds (4 hours).</li></ul></li><li><p>大量小批量插入的优化方案</p><p>https://clickhouse.com/docs/en/optimize/asynchronous-insertsEnabling asynchronous inserts<a href="https://clickhouse.com/docs/en/optimize/asynchronous-inserts#enabling-asynchronous-inserts" target="_blank" rel="noopener noreferrer"></a></p><p>Asynchronous inserts can be enabled for a particular user, or for a specific query:</p><ul><li><p>Enabling asynchronous inserts at the user level. This example uses the user <code>default</code>, if you create a different user then substitute that username:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">ALTER</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> USER</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> SETTINGS async_insert </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>You can specify the asynchronous insert settings by using the SETTINGS clause of insert queries:</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INSERT INTO</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> YourTable SETTINGS async_insert</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, wait_for_async_insert</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> VALUES</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (...)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>You can also specify asynchronous insert settings as connection parameters when using a ClickHouse programming language client.</p><p>As an example, this is how you can do that within a JDBC connection string when you use the ClickHouse Java JDBC driver for connecting to ClickHouse Cloud :</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;jdbc:ch://HOST.clickhouse.cloud:8443/?user=default&amp;password=PASSWORD&amp;ssl=true&amp;custom_http_params=async_insert=1,wait_for_async_insert=1&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Our strong recommendation is to use async_insert=1,wait_for_async_insert=1 if using asynchronous inserts. Using wait_for_async_insert=0 is very risky because your INSERT client may not be aware if there are errors, and also can cause potential overload if your client continues to write quickly in a situation where the ClickHouse server needs to slow down the writes and create some backpressure in order to ensure reliability of the service.</p></li></ul></li><li><p>物化视图</p><p>物化视图是一种在写入数据时对数据进行预处理和聚合的方法，可以提高查询性能。 物化视图可以级联，即一个物化视图的目标表可以作为另一个物化视图的源表。 创建物化视图需要先创建源表和目标表，然后指定物化视图的查询逻辑。 源表可以使用Null表引擎来节省存储空间，因为源数据不需要保留。 目标表可以使用AggregatingMergeTree或SummingMergeTree等表引擎来支持增量聚合和合并。 物化视图可以使用sumState、sumMerge等聚合函数来计算聚合状态和结果。 物化视图有一些限制，例如不能使用ORDER BY、LIMIT、DISTINCT等子句，不能使用JOIN、UNION ALL等操作符，不能使用窗口函数等。</p></li><li><p>查询表存储空间</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sql"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    table</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> AS</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> `表名`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    sum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">rows</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">AS</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> `总行数`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    formatReadableSize(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">sum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(data_uncompressed_bytes)) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">AS</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> `原始大小`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    formatReadableSize(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">sum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(data_compressed_bytes)) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">AS</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> `压缩大小`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">    round</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">sum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(data_compressed_bytes) / </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">sum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(data_uncompressed_bytes)) * </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">AS</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> `压缩率`</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> system</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">parts</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">WHERE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> table</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> IN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;event_db_data&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">GROUP BY</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> table</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>内存需求</p><p>https://clickhouse.com/docs/ru/operations/tips</p></li></ol><h2 id="写入延迟优化" tabindex="-1"><a class="header-anchor" href="#写入延迟优化"><span>写入延迟优化</span></a></h2><h3 id="_1-优化小批量写入性能" tabindex="-1"><a class="header-anchor" href="#_1-优化小批量写入性能"><span>1. 优化小批量写入性能</span></a></h3><ol><li><p><strong>合并写入</strong>：尝试将多个小批量数据合并为一个较大的批量，然后一次性写入 Clickhouse，以减少写入操作的次数和提高写入速度。</p></li><li><p><strong>使用缓冲表</strong>：使用 <code>Buffer</code> 引擎创建一个缓冲表，可以在内存中缓存数据批，当达到特定条件时自动将数据批导入实际表。这样可以提高写入速度，但需要注意内存占用情况。</p></li></ol><p><code>Buffer</code> 表引擎用于创建缓冲表，它接收9个参数，这些参数控制缓冲的行为和性能。下面是每个参数的详细解释：</p><ol><li><code>database</code> (ffpay_risk_control): 目标数据库的名称，缓冲表将把数据刷入这个数据库中的目标表。</li><li><code>target_table</code> (strategy_execution_log_actual): 目标表的名称，缓冲表将把数据刷入这个表中。</li><li><code>num_layers</code> (16): 缓冲区的层数，每层都有独立的条件，当满足条件时，会将数据从当前层向下一层传递，最后刷入目标表。较高的层数可以增加缓冲区的容量和写入性能，但同时会消耗更多的内存。</li><li><code>min_time</code> (10): 最小生存时间，单位为秒。数据在当前层至少需要存活这么多时间，才有可能向下一层传递。这个参数可以控制数据在缓冲区内的最小生存时间。</li><li><code>max_time</code> (100): 最大生存时间，单位为秒。数据在当前层达到这个时间后，必须向下一层传递。这个参数可以控制数据在缓冲区内的最大生存时间。</li><li><code>min_rows</code> (10000): 最小行数。只有当当前层的数据行数达到这个值时，数据才有可能向下一层传递。这个参数可以控制数据满足的最小行数条件。</li><li><code>max_rows</code> (1000000): 最大行数。当当前层的数据行数达到这个值时，数据必须向下一层传递。这个参数可以控制数据满足的最大行数条件。</li><li><code>min_bytes</code> (10000000): 最小字节数。只有当当前层的数据字节数达到这个值时，数据才有可能向下一层传递。这个参数可以控制数据满足的最小字节数条件。</li><li><code>max_bytes</code> (100000000): 最大字节数。当当前层的数据字节数达到这个值时，数据必须向下一层传递。这个参数可以控制数据满足的最大字节数条件。</li></ol><p>当任意一个条件（生存时间、行数或字节数）满足当前层的最大值时，数据将向下一层传递，最终在满足最后一层的条件时会刷入目标表。如果数据在当前层的生存时间已经超过最小值，但未达到最大值，此时如果满足行数或字节数的最小条件，数据也会向下一层传递。</p><p>这些参数需要根据您的实际应用场景和性能要求进行调整。一般来说，调整这些参数可以在保证写入性能和查询实时性的同时，平衡内存和CPU资源的消耗。</p><ol start="3"><li><strong>异步写入</strong>：将批量数据写入 Clickhouse 的操作放到后台执行，避免阻塞后续的写入操作。</li></ol><h3 id="_2-提高并发查询性能" tabindex="-1"><a class="header-anchor" href="#_2-提高并发查询性能"><span>2. 提高并发查询性能</span></a></h3><ol><li><strong>索引优化</strong>：创建更适合查询场景的索引，如 <code>PRIMARY KEY</code>、<code>ORDER BY</code> 以及 <code>SAMPLE BY</code>。优化索引可以提高查询性能并减少数据扫描量。</li><li><strong>分区优化</strong>：合理划分分区，根据业务场景和查询需求，使用 <code>PARTITION BY</code> 语句创建分区。通过减少查询涉及的分区，提高查询性能。</li><li><strong>数据分布和复制</strong>：配置 <code>Replicated*</code> 表引擎和使用 <code>Distributed</code> 表引擎，以保证数据在多个节点上均匀分布并实现负载均衡。这有助于提高查询性能和可用性。</li><li><strong>资源限制调整</strong>：根据需求调整 Clickhouse 的资源限制参数 (如内存、CPU、磁盘 I/O 等)，以满足不同场景下的性能需求。</li><li><strong>查询优化</strong>：优化查询语句，避免全表扫描和使用耗时较长的函数。使用 <code>PREWHERE</code> 子句对常用过滤条件进行预过滤，减少数据传输和计算量。</li></ol><p>通过实施以上优化策略，可以提高 Clickhouse 在实时数据收集与分析场景下的小批量写入速度和并发查询性能。</p>',15)]))}const k=i(n,[["render",l]]),o=JSON.parse('{"path":"/posts/2024-05-06-clickhouse-notes.html","title":"Clickhouse笔记","lang":"zh-CN","frontmatter":{"title":"Clickhouse笔记","date":"2024-05-06T00:00:00.000Z","category":["数据库","Clickhouse","技术开发"],"tag":["JSON支持","主键索引","TTL设置","异步插入","物化视图","存储空间查询","内存优化","写入延迟","并发查询","性能优化"],"file_name":"2024-05-06-clickhouse-notes.md","description":"Clickhouse笔记 创建包含 JSON 表的时候，需要使用实验功能 TCP 客户端不支持 JSON 主键索引指南 https://clickhouse.com/docs/en/optimize/sparse-primary-indexes 支持字段、行、表级别的 TTL 设置 https://clickhouse.com/docs/en/guid...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Clickhouse笔记\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-06T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-29T15:21:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Guohao\\",\\"url\\":\\"https://space.vistazx1.top\\"}]}"],["meta",{"property":"og:url","content":"https://space.vistazx1.top/posts/2024-05-06-clickhouse-notes.html"}],["meta",{"property":"og:site_name","content":"Vista"}],["meta",{"property":"og:title","content":"Clickhouse笔记"}],["meta",{"property":"og:description","content":"Clickhouse笔记 创建包含 JSON 表的时候，需要使用实验功能 TCP 客户端不支持 JSON 主键索引指南 https://clickhouse.com/docs/en/optimize/sparse-primary-indexes 支持字段、行、表级别的 TTL 设置 https://clickhouse.com/docs/en/guid..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-29T15:21:40.000Z"}],["meta",{"property":"article:tag","content":"性能优化"}],["meta",{"property":"article:tag","content":"并发查询"}],["meta",{"property":"article:tag","content":"写入延迟"}],["meta",{"property":"article:tag","content":"内存优化"}],["meta",{"property":"article:tag","content":"存储空间查询"}],["meta",{"property":"article:tag","content":"物化视图"}],["meta",{"property":"article:tag","content":"异步插入"}],["meta",{"property":"article:tag","content":"TTL设置"}],["meta",{"property":"article:tag","content":"主键索引"}],["meta",{"property":"article:tag","content":"JSON支持"}],["meta",{"property":"article:published_time","content":"2024-05-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-29T15:21:40.000Z"}]]},"git":{"createdTime":1727623300000,"updatedTime":1727623300000,"contributors":[{"name":"root","username":"root","email":"root@vistazx1.top","commits":1,"url":"https://github.com/root"}]},"readingTime":{"minutes":6.21,"words":1864},"filePathRelative":"posts/2024-05-06-clickhouse-notes.md","excerpt":"\\n<ol>\\n<li>创建包含 JSON 表的时候，需要使用实验功能</li>\\n</ol>\\n<div class=\\"language-sql line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"sql\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code class=\\"language-sql\\"><span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">SET</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> allow_experimental_object_type</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">1</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">CREATE</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> table</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> rc_field_json</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(fieldData </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">JSON</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">,</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">event</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> String, </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">timestamp</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> DATETIME64) ENGINE </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> MergeTree </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">ORDER BY</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> (</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">event</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">, </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">timestamp</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">)</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{k as comp,o as data};
