import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,b as n,o as i}from"./app-CJlMl9Ja.js";const t={};function l(p,a){return i(),s("div",null,a[0]||(a[0]=[n(`<h1 id="maven" tabindex="-1"><a class="header-anchor" href="#maven"><span>Maven</span></a></h1><h2 id="what-is-maven" tabindex="-1"><a class="header-anchor" href="#what-is-maven"><span>What is Maven</span></a></h2><p>Maven是一个项目管理工具，它包含了一个项目对象模型 ，一组标准集合，一个项目生命周期，一个依赖管理系统，和用来运行定义在生命周期阶段(phase)中插件(plugin)目标(goal)的逻辑</p><p>Maven可以管理：</p><ul><li>构建</li><li>文档</li><li>报告</li><li>依赖</li><li>SCMs</li><li>发布</li><li>分发</li></ul><p>思想：约定优先于配置，例如Maven的项目有默认的项目结构，默认在特定的位置查找文件。还有Maven的父pom包含一系列默认设置。</p><p><strong>项目创建</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>mvn archetype:generate</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>单元测试</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>mvn test // 编译并运行测试</span></span>
<span class="line"><span>mvn test-compile // 仅编译</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>打包Jar与安装</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>mvn package // 打包jar</span></span>
<span class="line"><span>mvn install // 将jar包安装到本地仓库</span></span>
<span class="line"><span>mvn site 创建html</span></span>
<span class="line"><span>mvn clean 清理 target</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="maven-插件与目标" tabindex="-1"><a class="header-anchor" href="#maven-插件与目标"><span>Maven 插件与目标</span></a></h2><p>Maven 本身的功能不多。大部分的功能由插件提供。一个插件包含多个目标。 每个目标是单独的任务，每个任务可以单独执行，也可以在流程中调用</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>mvn plugin:goal</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="maven的生命周期" tabindex="-1"><a class="header-anchor" href="#maven的生命周期"><span>Maven的生命周期</span></a></h2><p>生命周期：项目构建中的一系列阶段的序列。 每个目标有对应的阶段，被绑定的目标随阶段而运行</p><h2 id="项目坐标-coordinate" tabindex="-1"><a class="header-anchor" href="#项目坐标-coordinate"><span>项目坐标 Coordinate</span></a></h2><p>是在仓库中定位使用某个特定项目的关键，可以唯一标识该项目，包含：</p><ul><li>groupId 通常是组织名称的逆向域名</li><li>artifactId groupId下单独项目的唯一标识</li><li>version 项目的特定版本</li><li>packaging 项目打包后输出的类型，jar 或是 war</li></ul><h2 id="依赖" tabindex="-1"><a class="header-anchor" href="#依赖"><span>依赖</span></a></h2><p>Maven 支持传递性依赖：例如A依赖B，B又依赖C。引用A时会自动下载A、B、C。 体现了Maven仓库不仅存储了二进制，也存储了元数据（pom.xml）</p><h3 id="依赖范围" tabindex="-1"><a class="header-anchor" href="#依赖范围"><span>依赖范围</span></a></h3><ul><li>compile（编译范围）</li></ul><p>compile是默认的范围；如果没有提供一个范围，那该依赖的范围就是编译范 围。编译范围依赖在所有的classpath中可用，同时它们也会被打包。</p><ul><li>provided（已提供范围）</li></ul><p>provided依赖只有在当JDK或者一个容器已提供该依赖之后才使用。例如，如果 你开发了一个web应用，你可能在编译classpath中需要可用的Servlet API来编 译一个servlet，但是你不会想要在打包好的WAR中包含这个Servlet API；这个 Servlet API JAR由你的应用服务器或者servlet容器提供。已提供范围的依赖在 编译classpath（不是运行时）可用。它们不是传递性的，也不会被打包。</p><ul><li>runtime（运行时范围）</li></ul><p>runtime依赖在运行和测试系统的时候需要，但在编译的时候不需要。比如，你 可能在编译的时候只需要JDBC API JAR，而只有在运行的时候才需要JDBC驱动实 现。</p><ul><li>test（测试范围）</li></ul><p>test范围依赖，一般编译和运行时都不需要，它们只有在测试编译和测试阶段可用。</p><ul><li>system（系统范围）</li></ul><p>system范围依赖与provided类似，但是你必须显式的提供一个对于本地系统中 JAR文件的路径。这么做是为了允许基于本地对象编译，而这些对象是系统类库 的一部分。这样的构件应该是一直可用的，Maven也不会在仓库中去寻找它。如 果你将一个依赖范围设置成系统范围，你必须同时提供一个systemPath元素。注 意该范围是不推荐使用的（你应该一直尽量去从公共或定制的Maven仓库中引用 依赖）。</p><h3 id="冲突解决" tabindex="-1"><a class="header-anchor" href="#冲突解决"><span>冲突解决</span></a></h3><p>案例，排除并替换一个传递性依赖。 用于替换某个依赖内的实现</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>&lt;dependencies&gt;</span></span>
<span class="line"><span>    &lt;dependency&gt;</span></span>
<span class="line"><span>        &lt;groupId&gt;org.hibernate&lt;/groupId&gt;</span></span>
<span class="line"><span>        &lt;artifactId&gt;hibernate&lt;/artifactId&gt;</span></span>
<span class="line"><span>        &lt;version&gt;3.2.5.ga&lt;/version&gt;</span></span>
<span class="line"><span>        &lt;exclusions&gt;</span></span>
<span class="line"><span>            &lt;exclusion&gt;</span></span>
<span class="line"><span>                &lt;groupId&gt;javax.transaction&lt;/groupId&gt;</span></span>
<span class="line"><span>                &lt;artifactId&gt;jta&lt;/artifactId&gt;</span></span>
<span class="line"><span>            &lt;/exclusion&gt;</span></span>
<span class="line"><span>        &lt;/exclusions&gt;</span></span>
<span class="line"><span>    &lt;/dependency&gt;</span></span>
<span class="line"><span>    &lt;dependency&gt;</span></span>
<span class="line"><span>        &lt;groupId&gt;org.apache.geronimo.specs&lt;/groupId&gt;</span></span>
<span class="line"><span>        &lt;artifactId&gt;geronimo-jta_1.1_spec&lt;/artifactId&gt;</span></span>
<span class="line"><span>        &lt;version&gt;1.1&lt;/version&gt;</span></span>
<span class="line"><span>    &lt;/dependency&gt;</span></span>
<span class="line"><span>&lt;/dependencies&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="统一管理版本" tabindex="-1"><a class="header-anchor" href="#统一管理版本"><span>统一管理版本</span></a></h3><p>在顶层dependencyManagement上添加依赖，在子项目中就不必显式指定版本。</p><h3 id="多模块项目关系" tabindex="-1"><a class="header-anchor" href="#多模块项目关系"><span>多模块项目关系</span></a></h3><p>案例 目录结构如下的项目，相互关联</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>top-group/pom.xml</span></span>
<span class="line"><span>top-group/sub-group/pom.xml</span></span>
<span class="line"><span>top-group/sub-group/project-a/pom.xml</span></span>
<span class="line"><span>top-group/sub-group/project-b/pom.xml</span></span>
<span class="line"><span>top-group/project-c/pom.xml</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>可以在top-group的pom.xml上添加子模块，同理，子模块下若还有项目，也要在子模块的pom.xml上添加。Maven将会自动在子模块目录里寻找pom.xml。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>&lt;project&gt;</span></span>
<span class="line"><span>  &lt;groupId&gt;org.sonatype.mavenbook&lt;/groupId&gt;</span></span>
<span class="line"><span>  &lt;artifactId&gt;top-group&lt;/artifactId&gt;</span></span>
<span class="line"><span> ...</span></span>
<span class="line"><span>  &lt;modules&gt;</span></span>
<span class="line"><span>        &lt;module&gt;sub-group&lt;/module&gt;</span></span>
<span class="line"><span>        &lt;module&gt;project-c&lt;/module&gt;</span></span>
<span class="line"><span>   &lt;/modules&gt;</span></span>
<span class="line"><span> ...</span></span>
<span class="line"><span>&lt;/project&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="如何检查依赖冲突" tabindex="-1"><a class="header-anchor" href="#如何检查依赖冲突"><span>如何检查依赖冲突？</span></a></h3><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>mvn dependency:tree -Dverbose | grep conflict</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="版本升级" tabindex="-1"><a class="header-anchor" href="#版本升级"><span>版本升级</span></a></h3><p>使用以下插件</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>                    &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;</span></span>
<span class="line"><span>                    &lt;artifactId&gt;versions-maven-plugin&lt;/artifactId&gt;</span></span>
<span class="line"><span>                    &lt;version&gt;2.7&lt;/version&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="模块版本升级" tabindex="-1"><a class="header-anchor" href="#模块版本升级"><span>模块版本升级</span></a></h4><p>执行更改版本，此时Maven会修改pom.xml中的版本，同时创建*.versionsBackup备份</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>mvn versions:set -DnewVersion=1.0.2-SNAPSHOT</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行<code>mvn versions:commit</code>提交版本更改 执行<code>mvn versions:revert</code>恢复修改</p><h4 id="jar包的版本升级" tabindex="-1"><a class="header-anchor" href="#jar包的版本升级"><span>Jar包的版本升级</span></a></h4><p>可使用 <code>mvn versions:display-dependency-updates</code>查询</p><h4 id="plugin的版本升级" tabindex="-1"><a class="header-anchor" href="#plugin的版本升级"><span>plugin的版本升级</span></a></h4><p>可使用 <code>mvn versions:display-plugin-updates</code> 查询</p>`,56)]))}const d=e(t,[["render",l]]),c=JSON.parse('{"path":"/posts/2020-11-02-maven-basic.html","title":"Maven基础","lang":"zh-CN","frontmatter":{"title":"Maven基础","date":"2020-11-02T00:00:00.000Z","category":["Maven","项目管理","技术开发"],"tag":["Maven基础","项目对象模型","依赖管理","生命周期","插件","项目坐标","依赖范围","冲突解决","版本管理","多模块项目"],"file_name":"2020-11-02-maven-basic.md","description":"Maven What is Maven Maven是一个项目管理工具，它包含了一个项目对象模型 ，一组标准集合，一个项目生命周期，一个依赖管理系统，和用来运行定义在生命周期阶段(phase)中插件(plugin)目标(goal)的逻辑 Maven可以管理： 构建 文档 报告 依赖 SCMs 发布 分发 思想：约定优先于配置，例如Maven的项目有默认的...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Maven基础\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-11-02T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-29T15:32:11.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Guohao\\",\\"url\\":\\"https://space.vistazx1.top\\"}]}"],["meta",{"property":"og:url","content":"https://space.vistazx1.top/posts/2020-11-02-maven-basic.html"}],["meta",{"property":"og:site_name","content":"Vista"}],["meta",{"property":"og:title","content":"Maven基础"}],["meta",{"property":"og:description","content":"Maven What is Maven Maven是一个项目管理工具，它包含了一个项目对象模型 ，一组标准集合，一个项目生命周期，一个依赖管理系统，和用来运行定义在生命周期阶段(phase)中插件(plugin)目标(goal)的逻辑 Maven可以管理： 构建 文档 报告 依赖 SCMs 发布 分发 思想：约定优先于配置，例如Maven的项目有默认的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-29T15:32:11.000Z"}],["meta",{"property":"article:tag","content":"多模块项目"}],["meta",{"property":"article:tag","content":"版本管理"}],["meta",{"property":"article:tag","content":"冲突解决"}],["meta",{"property":"article:tag","content":"依赖范围"}],["meta",{"property":"article:tag","content":"项目坐标"}],["meta",{"property":"article:tag","content":"插件"}],["meta",{"property":"article:tag","content":"生命周期"}],["meta",{"property":"article:tag","content":"依赖管理"}],["meta",{"property":"article:tag","content":"项目对象模型"}],["meta",{"property":"article:tag","content":"Maven基础"}],["meta",{"property":"article:published_time","content":"2020-11-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-29T15:32:11.000Z"}]]},"git":{"createdTime":1727623300000,"updatedTime":1727623931000,"contributors":[{"name":"root","username":"root","email":"root@vistazx1.top","commits":2,"url":"https://github.com/root"}]},"readingTime":{"minutes":4.36,"words":1308},"filePathRelative":"posts/2020-11-02-maven-basic.md","excerpt":"\\n<h2>What is Maven</h2>\\n<p>Maven是一个项目管理工具，它包含了一个项目对象模型 ，一组标准集合，一个项目生命周期，一个依赖管理系统，和用来运行定义在生命周期阶段(phase)中插件(plugin)目标(goal)的逻辑</p>\\n<p>Maven可以管理：</p>\\n<ul>\\n<li>构建</li>\\n<li>文档</li>\\n<li>报告</li>\\n<li>依赖</li>\\n<li>SCMs</li>\\n<li>发布</li>\\n<li>分发</li>\\n</ul>\\n<p>思想：约定优先于配置，例如Maven的项目有默认的项目结构，默认在特定的位置查找文件。还有Maven的父pom包含一系列默认设置。</p>","autoDesc":true}');export{d as comp,c as data};
